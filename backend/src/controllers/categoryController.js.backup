const Category = require('../models/Category');
const Product = require('../models/Product');
const catchAsync = require('../utils/catchAsync');
const ApiResponse = require('../utils/apiResponse');
const AppError = require('../utils/errors');
const { categoryValidator, updateCategoryValidator } = require('../validators/categoryValidator');

/**
 * Get all categories with optional filtering and pagination
 */
const getCategories = catchAsync(async (req, res) => {
  const {
    page = 1,
    limit = 10,
    sort = 'name',
    order = 'asc',
    parent,
    level,
    isActive,
    search
  } = req.query;

  // Build filter object
  const filter = {};

  if (parent !== undefined) {
    filter.parent = parent === 'null' ? null : parent;
  }

  if (level !== undefined) {
    filter.level = parseInt(level);
  }

  if (isActive !== undefined) {
    filter.isActive = isActive === 'true';
  }

  if (search) {
    filter.$or = [
      { name: { $regex: search, $options: 'i' } },
      { description: { $regex: search, $options: 'i' } }
    ];
  }

  // Build sort object
  const sortOrder = order === 'desc' ? -1 : 1;
  const sortObj = { [sort]: sortOrder };

  // Calculate pagination
  const skip = (parseInt(page) - 1) * parseInt(limit);

  // Execute query with population
  const categories = await Category.find(filter)
    .populate('parent', 'name slug')
    .populate('children', 'name slug')
    .sort(sortObj)
    .skip(skip)
    .limit(parseInt(limit));

  // Get total count for pagination
  const total = await Category.countDocuments(filter);

  const pagination = {
    currentPage: parseInt(page),
    totalPages: Math.ceil(total / parseInt(limit)),
    totalItems: total,
    itemsPerPage: parseInt(limit),
    hasNext: parseInt(page) < Math.ceil(total / parseInt(limit)),
    hasPrev: parseInt(page) > 1
  };

  return ApiResponse.success(
    res,
    {
      categories,
      pagination
    },
    'Categories retrieved successfully'
  );
});

/**
 * Get category by ID or slug
 */
const getCategory = catchAsync(async (req, res) => {
  const { id } = req.params;
  const { includeProducts = false } = req.query;

  // Try to find by ID first, then by slug
  let category = await Category.findById(id)
    .populate('parent', 'name slug')
    .populate('children', 'name slug');

  if (!category) {
    category = await Category.findOne({ slug: id })
      .populate('parent', 'name slug')
      .populate('children', 'name slug');
  }

  if (!category) {
    throw new AppError('Category not found', 404);
  }

  // Include products if requested
  let products = [];
  if (includeProducts === 'true') {
    products = await Product.find({ 
      category: category._id,
      isActive: true 
    })
    .select('name slug price images isActive isFeatured')
    .limit(20);
  }

  return ApiResponse.success(res, {
    category,
    ...(includeProducts === 'true' && { products })
  }, 'Category retrieved successfully');
});

/**
 * Create new category
 */
const createCategory = catchAsync(async (req, res) => {
  const { error, value } = categoryValidator.validate(req.body);
  if (error) {
    throw new AppError(error.details[0].message, 400);
  }

  // Check if parent exists (if provided)
  if (value.parent) {
    const parentCategory = await Category.findById(value.parent);
    if (!parentCategory) {
      throw new AppError('Parent category not found', 404);
    }
    value.level = parentCategory.level + 1;
  } else {
    value.level = 0;
  }

  // Check for duplicate name at the same level
  const existingCategory = await Category.findOne({
    name: value.name,
    parent: value.parent || null
  });

  if (existingCategory) {
    throw new AppError('Category with this name already exists at this level', 409);
  }

  const category = await Category.create(value);
  await category.populate('parent', 'name slug');

  res.status(201).json(ApiResponse.success(
    category,
    'Category created successfully'
  ));
});

/**
 * Update category
 */
const updateCategory = catchAsync(async (req, res) => {
  const { id } = req.params;
  const { error, value } = updateCategoryValidator.validate(req.body);
  
  if (error) {
    throw new AppError(error.details[0].message, 400);
  }

  const category = await Category.findById(id);
  if (!category) {
    throw new AppError('Category not found', 404);
  }

  // Handle parent change
  if (value.parent !== undefined) {
    if (value.parent) {
      // Check if new parent exists
      const parentCategory = await Category.findById(value.parent);
      if (!parentCategory) {
        throw new AppError('Parent category not found', 404);
      }
      
      // Prevent circular reference
      if (value.parent === id) {
        throw new AppError('Category cannot be its own parent', 400);
      }
      
      // Check if the new parent is not a descendant
      const isDescendant = await Category.findOne({
        _id: value.parent,
        ancestors: id
      });
      
      if (isDescendant) {
        throw new AppError('Cannot set descendant as parent', 400);
      }
      
      value.level = parentCategory.level + 1;
    } else {
      value.level = 0;
    }
  }

  // Check for duplicate name (excluding current category)
  if (value.name) {
    const existingCategory = await Category.findOne({
      name: value.name,
      parent: value.parent !== undefined ? value.parent : category.parent,
      _id: { $ne: id }
    });

    if (existingCategory) {
      throw new AppError('Category with this name already exists at this level', 409);
    }
  }

  const updatedCategory = await Category.findByIdAndUpdate(
    id,
    { ...value, updatedAt: new Date() },
    { new: true, runValidators: true }
  ).populate('parent', 'name slug').populate('children', 'name slug');

  return ApiResponse.success(res, 
    updatedCategory,
    'Category updated successfully'
  ));
});

/**
 * Delete category
 */
const deleteCategory = catchAsync(async (req, res) => {
  const { id } = req.params;
  const { force = false } = req.query;

  const category = await Category.findById(id);
  if (!category) {
    throw new AppError('Category not found', 404);
  }

  // Check if category has children
  const hasChildren = await Category.exists({ parent: id });
  if (hasChildren && !force) {
    throw new AppError('Cannot delete category with subcategories. Use force=true to delete recursively.', 400);
  }

  // Check if category has products
  const hasProducts = await Product.exists({ category: id });
  if (hasProducts && !force) {
    throw new AppError('Cannot delete category with products. Use force=true or move products first.', 400);
  }

  if (force) {
    // Delete all subcategories recursively
    await Category.deleteMany({ ancestors: id });
    
    // Update products to remove category reference
    await Product.updateMany(
      { category: id },
      { $unset: { category: 1 } }
    );
  }

  await Category.findByIdAndDelete(id);

  return ApiResponse.success(res, 
    null,
    'Category deleted successfully'
  ));
});

/**
 * Get category hierarchy (tree structure)
 */
const getCategoryHierarchy = catchAsync(async (req, res) => {
  const { includeInactive = false } = req.query;

  const filter = includeInactive === 'true' ? {} : { isActive: true };

  const categories = await Category.find(filter)
    .populate('children', 'name slug isActive productCount')
    .sort({ level: 1, name: 1 });

  // Build tree structure
  const categoryMap = {};
  const rootCategories = [];

  // First pass: create category map
  categories.forEach(category => {
    categoryMap[category._id.toString()] = {
      ...category.toObject(),
      children: []
    };
  });

  // Second pass: build hierarchy
  categories.forEach(category => {
    const categoryObj = categoryMap[category._id.toString()];
    
    if (category.parent) {
      const parentId = category.parent.toString();
      if (categoryMap[parentId]) {
        categoryMap[parentId].children.push(categoryObj);
      }
    } else {
      rootCategories.push(categoryObj);
    }
  });

  return ApiResponse.success(res, 
    rootCategories,
    'Category hierarchy retrieved successfully'
  ));
});

/**
 * Upload category image
 */
const uploadCategoryImage = catchAsync(async (req, res) => {
  const { id } = req.params;

  if (!req.file) {
    throw new AppError('No image file provided', 400);
  }

  const category = await Category.findById(id);
  if (!category) {
    throw new AppError('Category not found', 404);
  }

  // Here you would typically upload to cloud storage (Cloudinary, AWS S3, etc.)
  // For now, we'll just store the local path
  const imageUrl = `/uploads/categories/${req.file.filename}`;

  const updatedCategory = await Category.findByIdAndUpdate(
    id,
    { 
      image: imageUrl,
      updatedAt: new Date()
    },
    { new: true }
  );

  return ApiResponse.success(res, 
    { imageUrl: updatedCategory.image },
    'Category image uploaded successfully'
  ));
});

/**
 * Remove category image
 */
const removeCategoryImage = catchAsync(async (req, res) => {
  const { id } = req.params;

  const category = await Category.findById(id);
  if (!category) {
    throw new AppError('Category not found', 404);
  }

  const updatedCategory = await Category.findByIdAndUpdate(
    id,
    { 
      $unset: { image: 1 },
      updatedAt: new Date()
    },
    { new: true }
  );

  return ApiResponse.success(res, 
    null,
    'Category image removed successfully'
  ));
});

/**
 * Get categories by level
 */
const getCategoriesByLevel = catchAsync(async (req, res) => {
  const { level } = req.params;
  const { isActive = true } = req.query;

  const filter = {
    level: parseInt(level),
    isActive: isActive === 'true'
  };

  const categories = await Category.find(filter)
    .populate('parent', 'name slug')
    .sort({ name: 1 });

  return ApiResponse.success(res, 
    categories,
    `Level ${level} categories retrieved successfully`
  ));
});

/**
 * Bulk update categories
 */
const bulkUpdateCategories = catchAsync(async (req, res) => {
  const { categoryIds, updates } = req.body;

  if (!categoryIds || !Array.isArray(categoryIds) || categoryIds.length === 0) {
    throw new AppError('Category IDs are required', 400);
  }

  if (!updates || Object.keys(updates).length === 0) {
    throw new AppError('Updates are required', 400);
  }

  // Add timestamp
  updates.updatedAt = new Date();

  const result = await Category.updateMany(
    { _id: { $in: categoryIds } },
    { $set: updates }
  );

  return ApiResponse.success(res, {
    modifiedCount: result.modifiedCount,
    matchedCount: result.matchedCount
  }, 'Categories updated successfully'));
});

module.exports = {
  getCategories,
  getCategory,
  createCategory,
  updateCategory,
  deleteCategory,
  getCategoryHierarchy,
  uploadCategoryImage,
  removeCategoryImage,
  getCategoriesByLevel,
  bulkUpdateCategories
};
